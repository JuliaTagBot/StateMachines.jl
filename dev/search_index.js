var documenterSearchIndex = {"docs":
[{"location":"usage/#User-guide-1","page":"Usage","title":"User guide","text":"","category":"section"},{"location":"usage/#","page":"Usage","title":"Usage","text":"CurrentModule = StateMachines","category":"page"},{"location":"usage/#Installation-1","page":"Usage","title":"Installation","text":"","category":"section"},{"location":"usage/#","page":"Usage","title":"Usage","text":"StateMachines.jl can be – once it is registered – installed with","category":"page"},{"location":"usage/#","page":"Usage","title":"Usage","text":"pkg> add StateMachines","category":"page"},{"location":"usage/#","page":"Usage","title":"Usage","text":"`The development version is installed with","category":"page"},{"location":"usage/#","page":"Usage","title":"Usage","text":"pkg> add(\"https://github.com/pbayer/StateMachines.jl\")","category":"page"},{"location":"usage/#","page":"Usage","title":"Usage","text":"The package is then loaded with","category":"page"},{"location":"usage/#","page":"Usage","title":"Usage","text":"using StateMachines","category":"page"},{"location":"usage/#System-description-1","page":"Usage","title":"System description","text":"","category":"section"},{"location":"usage/#","page":"Usage","title":"Usage","text":"A system has different levels, which are used to hide complexity.","category":"page"},{"location":"usage/#","page":"Usage","title":"Usage","text":"Id\nSystem","category":"page"},{"location":"usage/#StateMachines.Id","page":"Usage","title":"StateMachines.Id","text":"Id\n\nAn identifier used to identify and to register system components.\n\n\n\n\n\n","category":"type"},{"location":"usage/#StateMachines.System","page":"Usage","title":"StateMachines.System","text":"An abstract type used to identify system components\n\n\n\n\n\n","category":"type"},{"location":"usage/#","page":"Usage","title":"Usage","text":"Behavior and StateMachine are used to describe the activities of a system","category":"page"},{"location":"usage/#","page":"Usage","title":"Usage","text":"Behavior\nStateMachine","category":"page"},{"location":"usage/#StateMachines.Behavior","page":"Usage","title":"StateMachines.Behavior","text":"Behavior\n\nBehavior differentiates state machines and is needed to correctly  dispatch on them.\n\nExample\n\nusing StateMachines, Simulate\n\nstruct B1 <: Behavior end               # define the behaviors\nstruct B2 <: Behavior end\n\nSM1 = StateMachine(\"SM1\", B1())         # create state machine variables with\nSM2 = StateMachine(\"SM2\", B2())         # specified behaviors and suroundings\n\nfunction step!(A::StateMachine{B1}, ::Idle, σ::Load)  # transition functions\n    [....]                                            # implement the behaviour\nend\nfunction step!(A::StateMachine{B1}, ::Busy, σ::Fail) = [....]\nfunction step!(A::StateMachine{B1}, ::Failed, ::Repair) = [....]\n[....]\n\nwhile true                             # later at runtime ...\n    event = put!(SM1.gate[“in”])       # an event is read from an input channel\n    step!(SM1, event)                  # and a state machine transition is called\nend\n\n\n\n\n\n","category":"type"},{"location":"usage/#StateMachines.StateMachine","page":"Usage","title":"StateMachines.StateMachine","text":"StateMachine{B}(id::Id, b::B) where {B <: Behavior}\nStateMachine(id::Id, b::Behavior)\n\nA state machine implements a Behavior.  It can register to a complex state in another state machine.\n\nArguments, Fields\n\nid::Id: each process in a box or a block has to have an unique identifier,\nm::M: a model identifier,\nenv::Union{AbstractState, Nothing}: links to the surrounding complex state,\ngate::Dict{Id, Channel}: events and tokens flow through the gates, each gate   has an unique identifier.\nstate::AbstractState: used to operate the state machine,\nvar::Dict{Id, Any}: a dictionary of local variables, each with a unique Id.\n\n\n\n\n\n","category":"type"},{"location":"usage/#State-machines-1","page":"Usage","title":"State machines","text":"","category":"section"},{"location":"usage/#States-1","page":"Usage","title":"States","text":"","category":"section"},{"location":"usage/#","page":"Usage","title":"Usage","text":"AbstractState\nSimpleState\nCompositeState\nOrthogonalState\nSubmachineState\nPseudoState","category":"page"},{"location":"usage/#StateMachines.AbstractState","page":"Usage","title":"StateMachines.AbstractState","text":"AbstractState\n\nA supertype to different state types. A state stands for a characteristic set of  activities of a state machine. A set of states describes the state space of a state  machine. An event may cause a state machine to change its state.\n\nState types can be shared between different state machines. But they may mean  different things since they stand for different activities.\n\nThere are different subtypes of AbstractState: \n\nSimpleState,\nCompositeState and OrthogonalState,\nSubmachineState and\nPseudoState\n\n\n\n\n\n","category":"type"},{"location":"usage/#StateMachines.SimpleState","page":"Usage","title":"StateMachines.SimpleState","text":"A simple state has no internal vertices or transitions.\n\n\n\n\n\n","category":"type"},{"location":"usage/#StateMachines.CompositeState","page":"Usage","title":"StateMachines.CompositeState","text":"A composite State contains at least one region.\n\n\n\n\n\n","category":"type"},{"location":"usage/#StateMachines.OrthogonalState","page":"Usage","title":"StateMachines.OrthogonalState","text":"An orthogonal state is a composite state containing multiple regions.\n\n\n\n\n\n","category":"type"},{"location":"usage/#StateMachines.SubmachineState","page":"Usage","title":"StateMachines.SubmachineState","text":"A submachine State refers to an entire state machine nested within.\n\n\n\n\n\n","category":"type"},{"location":"usage/#StateMachines.PseudoState","page":"Usage","title":"StateMachines.PseudoState","text":"PseudoState\n\nA Pseudostate is an abstraction for different transient states. A state machine enters a pseudo state temporarily within a transition to the next stable state.\n\n\n\n\n\n","category":"type"},{"location":"usage/#Events-1","page":"Usage","title":"Events","text":"","category":"section"},{"location":"usage/#","page":"Usage","title":"Usage","text":"","category":"page"},{"location":"usage/#Transitions-1","page":"Usage","title":"Transitions","text":"","category":"section"},{"location":"usage/#","page":"Usage","title":"Usage","text":"step!","category":"page"},{"location":"usage/#StateMachines.step!","page":"Usage","title":"StateMachines.step!","text":"step!(A::StateMachine, q::AbstractState, σ::AbstractEvent)\n\ntransition function δ causing a state machine A in state q₁ at event σ to take on a new state q₂.\n\nFor all specified transitions of A a step!(A, q, σ)-function has to be implemented. The fallback step function does nothing and is called for all other calls to step!(A, q, σ).\n\nArguments\n\nA::StateMachine: a state machine\nq::AbstractState: any state ∈ Q\nσ::AbstractEvent: any discrete event ∈ Σ\n\n\n\n\n\n","category":"function"},{"location":"usage/#Operation-1","page":"Usage","title":"Operation","text":"","category":"section"},{"location":"usage/#","page":"Usage","title":"Usage","text":"","category":"page"},{"location":"examples/#Examples-1","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#Programs-1","page":"Examples","title":"Programs","text":"","category":"section"},{"location":"examples/#","page":"Examples","title":"Examples","text":"are at https://github.com/pbayer/StateMachines.jl/tree/master/docs/examples","category":"page"},{"location":"examples/#Notebooks-1","page":"Examples","title":"Notebooks","text":"","category":"section"},{"location":"examples/#","page":"Examples","title":"Examples","text":"see https://github.com/pbayer/StateMachines.jl/tree/master/docs/notebooks","category":"page"},{"location":"overview/#A-framework-for-state-machines-1","page":"Overview","title":"A framework for state machines","text":"","category":"section"},{"location":"overview/#","page":"Overview","title":"Overview","text":"State machines can be used to describe or implement discrete event systems. Julia with its multiple dispatch system is particularly practical in this regard. StateMachines.jl provides a framework to allow a straightforward implementation of interacting state machines.","category":"page"},{"location":"overview/#","page":"Overview","title":"Overview","text":"(Image: UML class diagram)","category":"page"},{"location":"overview/#System-1","page":"Overview","title":"System","text":"","category":"section"},{"location":"overview/#","page":"Overview","title":"Overview","text":"A System is an abstract type used to describe entities.","category":"page"},{"location":"overview/#State-machine-1","page":"Overview","title":"State machine","text":"","category":"section"},{"location":"overview/#","page":"Overview","title":"Overview","text":"A StateMachine is the basic operating unit. It has a state variable and reacts to events through a state transition. Thereby it implements the Behavior of a system.","category":"page"},{"location":"overview/#State-1","page":"Overview","title":"State","text":"","category":"section"},{"location":"overview/#","page":"Overview","title":"Overview","text":"A State models a situation in the execution of a StateMachine Behavior during which some invariant condition holds. \n(UML 2.5 14.2.3.4)","category":"page"},{"location":"overview/#","page":"Overview","title":"Overview","text":"simple:\ncomposite: a simple composite state contains one region. A state machine implements the associated behaviour.  \northogonal: this is a composite state containing multiple regions.\nsubmachine: a submachine state instantiates a state machine\npseudostate: this is a transient state between two stable states\ninitial\ndeep history\nshallow history\njoin\nfork\njunction\nchoice\nentry point\nexit point\nterminate","category":"page"},{"location":"overview/#State-actions-1","page":"Overview","title":"State actions","text":"","category":"section"},{"location":"overview/#","page":"Overview","title":"Overview","text":"enter!, entry, doit, exit","category":"page"},{"location":"overview/#Event-1","page":"Overview","title":"Event","text":"","category":"section"},{"location":"overview/#","page":"Overview","title":"Overview","text":"An Event is the specification of some occurrence that may potentially trigger behavioral effects. \n(UML 2.5 13.3.3.1)","category":"page"},{"location":"overview/#","page":"Overview","title":"Overview","text":"message\nchange → change variable, conditional event\ntime","category":"page"},{"location":"overview/#Transition-1","page":"Overview","title":"Transition","text":"","category":"section"},{"location":"overview/#","page":"Overview","title":"Overview","text":"external\ninternal\nlocal\ncompound transition → involving submachines, regions …","category":"page"},{"location":"overview/#Action-1","page":"Overview","title":"Action","text":"","category":"section"},{"location":"#StateMachines.jl-1","page":"Home","title":"StateMachines.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"a framework for state machines in Julia. It will support:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"hierarchical state machines (HSM) as described by UML statecharts,\nbut also precursor state diagrams like Harel statecharts or Moore and Mealy machines","category":"page"},{"location":"#","page":"Home","title":"Home","text":"It then will be useful for ","category":"page"},{"location":"#","page":"Home","title":"Home","text":"discrete event simulation of communication or queueing systems where events to state machines are generated by a simulation engine,\nimplementation of reactive system with user generated or external events.","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"StateMachines.jl is not yet an registered package and is installed with","category":"page"},{"location":"#","page":"Home","title":"Home","text":"pkg> add(\"https://github.com/pbayer/StateMachines.jl\")","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Author: Paul Bayer License: MIT","category":"page"},{"location":"internals/#Internals-1","page":"Internals","title":"Internals","text":"","category":"section"}]
}
